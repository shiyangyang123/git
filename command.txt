﻿git config --list 显示配置列表
git config --global user.email "stone2019@qq.com"
git config --global user.name "shiyangyang"

pwd 显示当前目录
git init 把当前目录变成Git可以管理的仓库
ls -ah  查看目录里面所有文件
clear 清屏
vi readme.txt 用vi编辑器 
cat readme.txt 显示文件内容

git add readme.txt 添加文件，可反复多次使用，添加多个文件
git commit -m "wrote a readme file" 完成提交，-m后面是说明
git status 查看文件是否被修改过
git diff readme.txt  查看修改内容
git log 显示从最近到最远的提交日志
git log --pretty=oneline  精简显示
git reset --hard HEAD^  回到一个版本
git reset --hard 60cbddf 加上文件号回退到指定版本
git reflog 记录每一次命令
git checkout -- readme.txt  没提交前，可以丢弃工作区的修改.没有--就是切换分支
git reset HEAD readme.txt 提交后，可以回退版本。HEAD表示最近的版本。
rm test.txt  删除文件
git rm test.txt 删除库中文件
git commit -m "remove test.txt" 确认删除文件

git tag 查看所有标签
git tag v1.0 设置tag,默认head
git log --pretty=oneline --abbrev-commit 查看历史提交的commitid
git tag v0.8 84edfbe 指定id 设置tag
git tag -a v1.0 -m "shiyangyang" 可以指定标签信息
git tag -s v1.0 -m "shiyangyang" 可以用PGP签名标签 要安装gpg
git show v1.0 查看某个tag详细说明
git push origin v1.0 推送某个标签到远程
git push origin --tags 一次性推送全部尚未推送到远程的本地标签
git tag -d v1 删除tag
git push origin :refs/tags/v1.0 删除远程标签

git checkout -b dev 创建并切换分支
git branch 查看分支
git branch dev 创建分支
git checkout master 切换分支
git merge dev 合并分支 
git branch -d dev 删除分支，合并内容后可以安全删除
git log --graph 查看合并分支图
git log --graph --pretty=oneline --abbrev-commit 

ssh-keygen -t rsa -C "stone2019@qq.com" 生成rsa key

新建仓库：
echo "# doutu" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:shiyangyang123/doutu.git
git push -u origin master

连接远程仓库
git remote add origin git@github.com:shiyangyang123/git.git 
git push -u origin master 第一次推送用
git push origin master 推送

git clone git@github.com:shiyangyang123/git.git  克隆一个仓库 --bare 不加.git目录
git remote -v 查看远程库信息
git pull 
git fetch
git add -A

ignore-removal      ignore paths removed in the working tree (same as --no-all)
ignore-errors       just skip files which cannot be added because of errors
ignore-missing      check if - even missing - files are ignored in dry run

git reset --hard HEAD~5 删服务器上的commit记录
git push origin HEAD --force 提交

